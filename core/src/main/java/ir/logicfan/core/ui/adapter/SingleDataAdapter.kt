package ir.logicfan.core.ui.adapter

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import ir.logicfan.core.BR
import ir.logicfan.core.ui.viewholder.DataViewHolder

/**
 * Define an adapter which can display an adapter with single data source
 *
 * @param T data holder type
 * @property itemLayout row view item layout
 * @property bindingDataVariableId data variable id inside your view layout
 * (BR is a singleton class generated by data binding to holds all kind of variable id's)
 * @param diffCallback determine a way to compare two items (ListAdapter needs this when adding new items)
 */
open class SingleDataAdapter<T>(
    @LayoutRes protected val itemLayout: Int,
    protected val bindingDataVariableId: Int = BR.item,
    diffCallback: DiffUtil.ItemCallback<T>
) : ListAdapter<T, DataViewHolder<T>>(diffCallback) {

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DataViewHolder<T> {
        val layoutInflater = LayoutInflater.from(parent.context)
        val binding = DataBindingUtil.inflate<ViewDataBinding>(layoutInflater, viewType, parent, false)
        val viewHolder = provideViewHolder(binding)
        binding.setLifecycleOwner(viewHolder)  // register for lifecycle events
        return viewHolder
    }

    open fun provideViewHolder(binding: ViewDataBinding): DataViewHolder<T> = DataViewHolder(binding, bindingDataVariableId)

    override fun onBindViewHolder(holder: DataViewHolder<T>, position: Int) = holder.bind(getItem(position))

    override fun getItemViewType(position: Int): Int = itemLayout

    override fun onViewAttachedToWindow(holder: DataViewHolder<T>) {
        super.onViewAttachedToWindow(holder)
        holder.onAppear() // notify ViewHolder about lifecycle change
    }

    override fun onViewDetachedFromWindow(holder: DataViewHolder<T>) {
        super.onViewDetachedFromWindow(holder)
        holder.onDisappear() // notify ViewHolder about lifecycle change
    }
}