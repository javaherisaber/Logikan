package ir.logicfan.core.ui.recyclerview.adapter

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.annotation.LayoutRes
import androidx.databinding.DataBindingUtil
import androidx.databinding.ViewDataBinding
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import ir.logicfan.core.BR
import ir.logicfan.core.ui.recyclerview.viewholder.DataViewHolder

/**
 * Define an adapter which can display an adapter with single data source
 *
 * @property itemLayout row view item layout
 * @property bindingItemVariableId data variable id inside your view layout
 * (BR is a singleton class generated by data binding to holds all kind of variable id's)
 * @property binding data binding handle to bind your layout
 * @property viewOnClickListenerToBindingIdMap simple view click listener
 * @property dataClickListenerToBindingIdMap click listener which passes data item parameter when clicked
 *
 * @param diffCallback determine a way to compare two items (ListAdapter needs this when adding new items)
 * @param T type of data holder
 */
open class SingleDataAdapter<T>(
    @LayoutRes protected val itemLayout: Int,
    diffCallback: DiffUtil.ItemCallback<T>,
    private val bindingItemVariableId: Int? = BR.item
) : ListAdapter<T, DataViewHolder<T>>(diffCallback) {

    private lateinit var binding: ViewDataBinding
    private val viewOnClickListenerToBindingIdMap = HashMap<View.OnClickListener, Int>()
    private val dataClickListenerToBindingIdMap = HashMap<DataViewHolder.OnDataClickListener<T>, Int>()

    fun addDataClickListener(onDataClickListener: DataViewHolder.OnDataClickListener<T>, bindingVariableId: Int) {
        dataClickListenerToBindingIdMap[onDataClickListener] = bindingVariableId
    }

    fun addViewListener(onClickListener: View.OnClickListener, bindingVariableId: Int) {
        viewOnClickListenerToBindingIdMap[onClickListener] = bindingVariableId
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DataViewHolder<T> {
        val layoutInflater = LayoutInflater.from(parent.context)
        this.binding = DataBindingUtil.inflate<ViewDataBinding>(layoutInflater, viewType, parent, false)
        val viewHolder = provideViewHolder(binding.root)
        binding.setLifecycleOwner(viewHolder)  // register for lifecycle events
        return viewHolder
    }

    open fun provideViewHolder(itemView: View): DataViewHolder<T> = DataViewHolder(itemView)

    override fun onBindViewHolder(holder: DataViewHolder<T>, position: Int) {
        bindingItemVariableId?.let {
            holder.addItemBinding(getItem(position), bindingItemVariableId)
        }
        holder.addViewOnClickListener(viewOnClickListenerToBindingIdMap)
        holder.addDataClickListener(dataClickListenerToBindingIdMap)
        holder.bind(binding)
    }

    override fun getItemViewType(position: Int): Int = itemLayout

    override fun onViewAttachedToWindow(holder: DataViewHolder<T>) {
        super.onViewAttachedToWindow(holder)
        holder.onAppear() // notify ViewHolder about lifecycle change
    }

    override fun onViewDetachedFromWindow(holder: DataViewHolder<T>) {
        super.onViewDetachedFromWindow(holder)
        holder.onDisappear() // notify ViewHolder about lifecycle change
    }
}